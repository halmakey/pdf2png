#!/usr/bin/swift

import Foundation
import AppKit

enum PDFError : ErrorType {
    case FileNotFound
    case FileBroken
}

func pdf2png(inurl: NSURL, outurl: NSURL, width: CGFloat, height: CGFloat, scale: CGFloat) throws {
    let data = NSData(contentsOfURL: inurl)
    if data == nil {
        throw PDFError.FileNotFound
    }

    let pdfImageRep = NSPDFImageRep(data: data!)
    if pdfImageRep == nil {
        throw PDFError.FileBroken
    }

    let obounds = pdfImageRep!.bounds
    let owidth = (width == 0 ? obounds.width : width) * scale;
    let oheight = (height == 0 ? obounds.height : height) * scale;
    let bounds = NSRect(x: 0, y: 0, width: owidth, height: oheight)

    let ri = NSImage(size: bounds.size)
    ri.lockFocus()
    NSGraphicsContext.currentContext()?.imageInterpolation = .High
    NSGraphicsContext.currentContext()?.colorRenderingIntent = .AbsoluteColorimetric
    pdfImageRep?.drawInRect(bounds)

    let bitmapRep = NSBitmapImageRep(focusedViewRect: bounds)
    ri.unlockFocus()
    let pngData = bitmapRep?.representationUsingType(.NSPNGFileType, properties: [:])
    pngData?.writeToFile(outurl.path!, atomically: true)
}

if Process.arguments.count < 2 {
    print("pdf2png infile outfile width height scale")
    exit(0)
}

let inurl = NSURL(fileURLWithPath: Process.arguments[1])
let outurl = NSURL(fileURLWithPath: Process.arguments[2])

var width: CGFloat = 0, height: CGFloat = 0, scale: CGFloat = 1
if Process.arguments.count >= 5 {
    if let n = NSNumberFormatter().numberFromString(Process.arguments[3]) {
        width = CGFloat(n)
    }
    if let n = NSNumberFormatter().numberFromString(Process.arguments[4]) {
        height = CGFloat(n)
    }
}

if Process.arguments.count >= 6 {
    if let n = NSNumberFormatter().numberFromString(Process.arguments[5]) {
        scale = CGFloat(n)
    }
}

do {
    try pdf2png(inurl, outurl: outurl, width: width, height: height, scale: scale)
} catch PDFError.FileNotFound {
    print("\(inurl.path!) not found.")
    exit(1)
} catch PDFError.FileBroken {
    print("\(outurl.path!) not broken.")
    exit(2)
}
